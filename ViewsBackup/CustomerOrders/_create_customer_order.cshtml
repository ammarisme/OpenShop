<div class="col-md-12">
    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog" data-backdrop="false">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">Close</button>
                    <h4 class="modal-title"></h4>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">OK</button>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="col-md-6">
    <form action="../api/CustomerOrders/CreateCustomerOrder" id="products-in-customer-order-form" method="POST">
        <div id="name-group" class="form-group">
                                                @*
                    auto generated -
        ProductsInCustomerOrderId
        CustomerOrderId
                   *@
            @*ProductId*@
            <label for="name">Product</label>
            @Html.DropDownList("ProductId", new SelectList(ViewBag.products, "ProductId", "ProductName"), htmlAttributes: new { @class = "form-control", id = "ProductName" })

            @*Quantity*@
            <label for="name">Quantity</label>
            <input type="number" class="form-control" name="Quantity" placeholder="eg :- 100">

            @*UnitPrice*@
            <label for="name">Unit Price</label>
            <input type="number" class="form-control" name="UnitPrice" placeholder="eg :- 100">

            @*Description*@
            <label for="name">Description</label>
            <input type="text" class="form-control" name="Description" placeholder="eg :- 100">
        </div>
        <button type="submit" class="btn btn-default">Add Product<span class="fa fa-arrow-down"></span></button>
    </form>
    <button class="btn btn-warning" id="removeProduct">Remove Product<span class="fa fa-arrow-right"></span></button>
</div>

<div class="col-md-6 col-sm-12">
    <form action="no-implementation" id="customer-order-form" method="POST">
        <div id="name-group" class="form-group">
                        @*
                    autogenerated :CustomerOrderId
                        *@
            @*CustomerId*@
            <label for="date">Customer</label>
            @Html.DropDownList("CustomerId", new SelectList(ViewBag.customers, "CustomerId", "CustomerFullName"), htmlAttributes: new { @class = "form-control", id = "CustomerFullName" })

            @*OrderDate*@
            <label for="date">OrderDate</label>
            <input type="date" name="OrderDate" class="form-control" />

            @*DeliveryDate*@
            <label for="date">OrderDueDate</label>
            <input type="date" name="OrderDueDate" class="form-control" />
            
            @*Description*@
            <label for="date">Description</label>
            <input type="text" name="Description" id="Description" class="form-control" />
        </div>
    </form>
    <button class="btn btn-success" id="create-customer-order-button">Create Customer Order</button>
</div>

<!-- this table stores the rows that is being added from the form-->
<div class="col-md-12 col-sm-12">
    <table id="products-in-customer-order-table" class="display" cellspacing="0" width="100%">
        <thead>
            <tr>
                <th>ProductId</th>
                <th>ProductName</th>
                <th>Quantity</th>
                <th>UnitPrice</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>


<script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
<script>
    viewControllerRoute = "../CustomerOrder/CreateCustomerOrder"; // where the user is in

    /// Initiating the products-in-customer-order-table
    var productsInCustomerOrderTable = initiateTable("products-in-customer-order-table", {
        "columns": [
                { "data": "ProductId" },
                { "data": "ProductName" },
                { "data": "Quantity" },
                { "data": "UnitPrice" },
                { "data": "Description" }
        ]
    });

    $("#removeProduct").on('click', function () {
        var selectedRowIndex = getTableSelectedRowIndex($("#products-in-customer-order-table"));
        productsInCustomerOrderTable.row(selectedRowIndex).remove().draw(false);
    }); //can be used commonly with as a table row removal button


    //  Linking the above created form and table
    syncFormWithTable("products-in-customer-order-form", productsInCustomerOrderTable, "ProductId", function () { }, function () { }); // connecting the table with the form

    $("#" + "create-customer-order-button").on('click', function (event) {
        
        var submitData = {}; // the data that will be sent using ajax

        var tableData = getTableData(productsInCustomerOrderTable); // the table that will be attached to the data

        productsInCustomerOrderTable.clear().draw(false);

        submitData = getFormValues("customer-order-form");

        submitData["ProductsInCustomerOrder"] = tableData; // adding the materials in datatable

        console.log(submitData); // to make sure we got the the right object going

        $.ajax({
            type: 'post',
            url: "/api/CustomerOrders/AddCustomerOrder",
            data: JSON.stringify(submitData), // need to be strigified to avoid browser hang
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                onCompletion();
            }
        });

        event.preventDefault();
    });

</script>