<h1>Create Product</h1>

<div class="col-md-12">
    <div class="col-md-6  well">
        <h3>Add Specifications to the Product</h3>
        <form action="no-implemetation" id="create-specification-in-product-form" method="POST">
            @*Database generated
                    public int SpecificationInProductId { get; set; }

                // foreign key in product
                public int ProductId { get; set; }*@

            <div id="name-group" class="form-group">
                @*public string Specification { get; set; }*@
                <label for="name">Specification</label>
                <input type="text" class="form-control" name="Specification" placeholder="eg: - Name">

                @*public string Value { get; set; }*@
                <label for="name">Value</label>
                <input type="text" class="form-control" name="Value" placeholder="eg :- red, 1.2 , 1">
            </div>
            <button type="submit" class="btn btn-success">Add Specification<span class="fa fa-arrow-down"></span></button>
        </form>
        <button class="btn btn-warning" id="removeSpecification">Remove Specification<span class="fa fa-arrow-right"></span></button>
    </div>

    <div class="col-md-6">
        <table id="specifications-in-product-table" class="display" cellspacing="0">
            <thead>
                <tr>
                    <th>Specification</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr>
                    <th>Specification</th>
                    <th>Value</th>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<div class="col-md-12">
    <div class="col-md-6  well">
        <h3>Materials used for product</h3>
        <form action="no-implemetation" id="create-materials-in-product-form" method="POST">
            @*database generated
                public int MaterialInProductId { get; set; }

                // foreign key to products
                public int ProductId { get; set; }*@
            <div id="name-group" class="form-group">

                @*public int MaterialId { get; set; }*@
                @Html.DropDownList("MaterialId", new SelectList(ViewBag.materials, "MaterialId", "MaterialName"), htmlAttributes: new { @class = "form-control", id = "MaterialName" })


                @*public float Quantity { get; set; }*@
                <label for="name">Quantity Used</label>
                <input type="number" class="form-control" name="Quantity" placeholder="eg :- red, 1.2 , 1">
            </div>
            <button type="submit" class="btn btn-success">Add Material<span class="fa fa-arrow-down"></span></button>
        </form>
        <button class="btn btn-warning" id="removeMaterial">Remove Material<span class="fa fa-arrow-right"></span></button>
    </div>

    <div class="col-md-6">
        <table id="materials-in-product-table" class="display" cellspacing="0">
            <thead>
                <tr>
                    <th>MaterialId</th>
                    <th>MaterialName</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr>
                    <th>MaterialId</th>
                    <th>MaterialName</th>
                    <th>Quantity</th>
                </tr>
            </tfoot>
        </table>
    </div>
    <div />
    <div class="col-md-12  well">
        <form action="no-implementation" id="create-product-form" method="POST">
            <div id="name-group" class="form-group">
                @* autogenerated public int ProductId { get; set; }*@
                @*public float StockQuantity { get; set; } = 0*@

                @*public string ProductName { get; set; }*@
                <label for="name">Product Name</label>
                <input type="text" name="ProductName" class="form-control">

                @*public string Unit { get; set; }*@
                <label for="name">Unit</label>
                <input type="text" name="Unit" class="form-control">

                @*public float UnitPrice { get; set; }*@
                <label for="name">UnitPrice (Currency : LRK)</label>
                <input type="number" pattern="[0-9]+([\.,][0-9]+)?" step="0.01" name="UnitPrice" class="form-control" />

            </div>
        </form>
        <button class="btn btn-success" id="create-product-button">Create Product</button>
    </div>

    <script>
        viewControllerRoute = "../Products/CreateProduct"; // where the user is in

        /// Initiating the specifications-in-materials-table
        var specificationsInProductTable = initiateTable("specifications-in-product-table", {
            "columns": [
                    { "data": "Specification" },
                    { "data": "Value" }
            ]
        }); // initiating the table with all the defauls features loaded in this function

        // Initiating the specifications creation and updation form

        // initiating the material form
        var createProductForm = $("#create-product-form");

        $("#removeSpecification").on('click', function () {
            var selectedRowIndex = getTableSelectedRowIndex($("#specifications-in-product-table"));
            specificationsInProductTable.row(selectedRowIndex).remove().draw(false);
        }); //can be used commonly with as a table removal button

        var onCompletion = function () { }; // a dummy functio

        //  Linking the specifications table to specifications form
        syncFormWithTable("create-specification-in-product-form", specificationsInProductTable, "Specification", onCompletion, onCompletion); // connecting the table with the form

        ////------------------------------
        var materialsInProductTable = initiateTable("materials-in-product-table", {
            "columns": [
                    { "data": "MaterialId" },
                    { "data": "MaterialName" },
                    { "data": "Quantity" }
            ]
        });
        $("#removeMaterial").on('click', function () {
            var selectedRowIndex = getTableSelectedRowIndex($("#materials-in-product-table"));
            materialsInProductTable.row(selectedRowIndex).remove().draw(false);
        }); //can be used commonly with as a table removal button


        syncFormWithTable("create-materials-in-product-form", materialsInProductTable, "MaterialId", onCompletion, onCompletion);


        // sending the final object

        $("#" + "create-product-button").on('click', function (event) {
            onCompletion(); // before submission
            var submitData = {}; // the data that will be sent using ajax

            var specificationsInProduct = getTableData(specificationsInProductTable); // the table that will be attached to the data
            var materialsInProduct = getTableData(materialsInProductTable);

            specificationsInProductTable.clear().draw(false);
            materialsInProductTable.clear().draw(false);

            submitData = getFormValues("create-product-form");

            submitData["SpecificationsInProduct"] = specificationsInProduct; // adding the materials in datatable
            submitData["MaterialsInProduct"] = materialsInProduct;

            console.log(submitData); // to make sure we got the the right object going

            $.ajax({
                type: 'post',
                url: "/api/Products/AddProduct",
                data: JSON.stringify(submitData), // need to be strigified to avoid browser hang
                dataType: 'json',
                contentType: 'application/json',
                success: function (data) {
                    onCompletion();
                }
            });

            event.preventDefault();
        });

    </script>
